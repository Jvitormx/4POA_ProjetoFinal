contexto do projeto

# Dar e Receber — Contexto do Backend

**Visão Geral**
“Dar e Receber” é um backend Spring Boot + PostgreSQL para um marketplace de doações geolocalizado. Os usuários podem publicar **Publicações** do tipo **OFERTA** (itens que possuem) ou **PEDIDO** (itens que precisam). Correspondências entre ofertas e pedidos geram coletas ponto a ponto, com chat e avaliações.

**Pilha de tecnologia**
-Java 17, Spring Boot 3.x
- Spring Data JPA (Hibernação)
- Segurança Spring (JWT)
- PostgreSQL (com tipos ENUM personalizados e índice geoespacial GIST)
- Lombok para redução média

**Esquema de banco de dados**
- **usuários** (UUID PK, nome, email, hash_senha, eh_instituicao, latitude_padrao, longitude_padrao, raio_busca_km, timestamps)
- **publicações** (UUID PK, tipo_publicacao ENUM, usuario_id → usuarios, titulo, descricao, categoria, quantidade, quantidade_original, inicio_coleta, fim_coleta, latitude, longitude, status_publicacao ENUM, permite_entrega, urgente, timestamps)
- **correspondências** (UUID PK, oferta_id → publicacoes(tipo=OFERTA), pedido_id → publicacoes(tipo=PEDIDO), quantidade, status_match ENUM, timestamps)
- **mensagens** (UUID PK, match_id → matches, remetente_id → usuários, conteudo, enviado_em)
- **avaliacoes** (UUID PK, match_id → matches, avaliador_id → usuários, avaliado_id → usuários, nota 1–5, comentário, criado_em)

**Enums (Java)**
```java
public enum TipoPublicacao { OFERTA, PEDIDO }
public enum StatusPublicacao { ABERTA, EM_NEGOCIACAO, CONCLUIDA, CANCELADA }
public enum StatusMatch { PENDENTE, CONFIRMADO, RECUSADO, CANCELADO }
Estrutura do Pacote

markdown
Copiar
Editar
com.example.givereceive
├─ entidade
│ ├─ enums
│ │ ├ TipoPublicacao.java
│ │ ├ StatusPublicacao.java
│ │ └ StatusMatch.java
│ ├ Usuário.java
│ ├ Publicacao.java
│ ├ Match.java
│ ├ Mensagem.java
│ └ Avaliacao.java
├─ repositório
│ ├ UsuárioRepository.java
│ ├ PublicacaoRepository.java
│ ├ MatchRepository.java
│ ├ MensagemRepository.java
│ └ AvaliacaoRepository.java
├─ serviço
│ ├ Serviço de Usuário.java
│ ├ Serviço de Publicação.java
│ ├ Serviço de Correspondência.java
│ ├ Serviço de Mensagem.java
│ └ Serviço de Avaliacao.java
├─ controlador
│ ├ Controlador de Autenticação.java
│ ├ Controlador de Usuário.java
│ ├ Controlador de Publicação.java
│ ├ Controlador de Correspondência.java
│ ├ Controlador de Mensagem.java
│ └ Controlador de Avaliacao.java
└─ segurança
├ Filtro de Autenticação Jwt.java
├ Filtro de Autorização Jwt.java
└ SecurityConfig.java
Principais Recursos e Fluxos

Aut.: Cadastro/login JWT

CRUD de Publicações + correspondência geoespacial (Haversine ou PostGIS)

Correspondências: criar, confirmar e decrementar quantidades automaticamente por meio de gatilhos

Chat: endpoint WebSocket /ws/chat por correspondência

Notificações: FCM / SMS opcional via Twilio

Próximos Passos para Configuração do Backend

Definir application.properties para PostgreSQL.

Mapear enumerações e entidades em JPA.

Criar repositórios e serviços/controladores básicos para Usuário e Publicação.

Conectar a segurança JWT.

Implementar lógica de correspondência na camada de serviço.

Adicionar endpoints para correspondências, mensagens e classificações.


Decisões Tomadas e Melhorias Implementadas
Unificação de Ofertas e Pedidos:

Criada tabela publicacoes com campo tipo (OFERTA/PEDIDO)

Mantidos campos específicos para cada tipo via constraints

Redução de complexidade no código de matching

Sistema de Matches Flexível:

Permite três tipos de conexões:

Oferta → Pedido (matching automático)

Usuário → Oferta (solicitação tradicional)

Usuário → Pedido (oferta direta para uma necessidade)

Controle de Quantidade Aprimorado:

Campo quantidade_original para cálculo de porcentagem atendida

Validação bidirecional (oferta não pode exceder pedido e vice-versa)

Status Mais Descritivos:

Tipos específicos para publicações e matches

Estados mais claros como EM_NEGOCIACAO

Vinculação Direta de Mensagens/Avaliações:

Agora relacionadas diretamente ao match

Simplifica queries para histórico de conversas

Otimizações Geoespaciais:

Uso de GIST com ll_to_earth para buscas por proximidade

Índices específicos para tipos de publicação

Validações de Negócio:

Garantia que ofertas têm período de coleta

Pedidos não têm datas específicas

Impede matches inválidos

Fluxo de Dados Exemplo
sql
-- 1. Usuário cria oferta
INSERT INTO publicacoes (tipo, usuario_id, titulo, quantidade, ..., tipo = 'OFERTA')
VALUES ('OFERTA', 'user1', 'Arroz Integral', 10, ...);

-- 2. Instituição cria pedido
INSERT INTO publicacoes (tipo, usuario_id, titulo, quantidade, ..., tipo = 'PEDIDO')
VALUES ('PEDIDO', 'user2', 'Precisamos de arroz', 8, ...);

-- 3. Sistema encontra match (ou usuário inicia)
INSERT INTO matches (oferta_id, pedido_id, quantidade, status)
VALUES ('oferta1', 'pedido1', 5, 'CONFIRMADO');

-- 4. Quantidades são atualizadas automaticamente
-- Oferta: 10 → 5
-- Pedido: 8 → 3

-- 5. Mensagens são trocadas
INSERT INTO mensagens (match_id, remetente_id, conteudo)
VALUES ('match1', 'user1', 'Posso entregar na próxima terça');
Este esquema mantém todas as funcionalidades essenciais da versão original enquanto adiciona flexibilidade para os novos requisitos, com melhor desempenho e consistência de dados.

Lembrando, O Give & Receive+ é uma PWA (Progressive Web App) que conecta doadores e receptores de forma geo-localizada, facilitando a doação de itens físicos e recursos. O sistema implementa:

Matching inteligente baseado em localização, categorias e disponibilidade

Fluxo completo desde a publicação até a conclusão da doação

Comunicação integrada via chat e notificações

Lógica de Negócio e Regras
1. Publicações (Ofertas/Pedidos)
Tipos:

OFERTA: Itens disponíveis para doação (ex: "10kg de arroz")

PEDIDO: Necessidades específicas (ex: "Precisamos de 5kg de feijão")

Regras:

Ofertas devem ter período de coleta (inicio_coleta, fim_coleta)

Pedidos podem ser marcados como urgente

Quantidade é decrementada automaticamente via triggers

Pacotes e Responsabilidades
Pacote	Descrição
config	-Configurações de segurança, WebSocket, CORS
controller	-Endpoints REST (Auth, Publications, Matches, Messages)
dto	-Objetos de transferência de dados (requests/responses)
entity	-Modelos do banco de dados (JPA)
repository	-Interfaces Spring Data JPA
service	-Lógica de negócio (Matching, Notificações, Geocoding)
exception	-Tratamento customizado de erros (404, 403, etc.)
security	-Autenticação JWT, roles, filtros
util	-Helpers (Geocoding, Cálculo de Distâncias)

Passos de implementação

Backend (Prioridade)

Publicações

CRUD completo

Validação de geolocalização

Matching

Algoritmo básico

Confirmação/recusa

Notificações

Integração com FCM

Histórico de notificações

Frontend (Fase 2)
Autenticação

Tela de login/registro

Contexto de autenticação

Feed Principal

Listagem de publicações

Filtros por categoria/distância

Chat

Interface básica de mensagens

Notificações em tempo real

Configuracoes de segurança Spring Security + JWT, Exception Handler Global podem ser deixadas por ultimo